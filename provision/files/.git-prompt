#!/bin/bash

function eread {
    local f="$1"
    shift
    test -r "$f" && read "$@" <"$f"
}

__git_ps1 () {

    local info=`git rev-parse \
        --git-dir \
        --is-inside-git-dir \
        --is-bare-repository \
        --is-inside-work-tree \
        --short HEAD \
        2> /dev/null`
    local rev_parse_exit_code="$?"

    if [ -z "$info" ]; then
        return
    fi

    local sha
    if [ "$rev_parse_exit_code" = "0" ]; then
        sha="${info##*$'\n'}"
        info="${info%$'\n'*}"
    fi
    local inside_worktree="${info##*$'\n'}"
    info="${info%$'\n'*}"
    local bare_repo="${info##*$'\n'}"
    info="${info%$'\n'*}"
    local inside_gitdir="${info##*$'\n'}"
    local g="${info%$'\n'*}"

    local bare=''
    local branch=''
    local r=''
    local step=''
    local total=''
    if [ -d "$g/rebase-merge" ]; then
        eread "$g/rebase-merge/head-name" b
        eread "$g/rebase-merge/msgnum" step
        eread "$g/rebase-merge/end" total
        if [ -f "$g/rebase-merge/interactive" ]; then
            r="|REBASE-i"
        else
            r="|REBASE-m"
        fi
    else
        if [ -d "$g/rebase-apply" ]; then
            eread "$g/rebase-apply/next" step
            eread "$g/rebase-apply/last" total
            if [ -f "$g/rebase-apply/rebasing" ]; then
                eread "$g/rebase-apply/head-name" b
                r="|REBASE"
            elif [ -f "$g/rebase-apply/applying" ]; then
                r="|AM"
            else
                r="|AM/REBASE"
            fi
        elif [ -f "$g/MERGE_HEAD" ]; then
            r="|MERGING"
        elif [ -f "$g/CHERRY_PICK_HEAD" ]; then
            r="|CHERRY-PICKING"
        elif [ -f "$g/REVERT_HEAD" ]; then
            r="|REVERTING"
        elif [ -f "$g/BISECT_LOG" ]; then
            r="|BISECTING"
        fi

        if [ -n "$branch" ]; then
            :
        elif [ -h "$g/HEAD" ]; then
            branch=`git symbolic-ref HEAD 2>/dev/null`
        else
            local head=''
            if ! eread "$g/HEAD" head; then
                return
            fi
            branch="${head#ref: }"
            # is it a symbolic ref?
            if [ "$head" = "$branch" ]; then
                branch=`git describe --tags --exact-match HEAD 2>/dev/null` || branch="$sha..."
                branch="($branch)"
            fi
        fi
    fi

    if [ -n "$step" ] && [ -n "$total" ]; then
        r="$r $step/$total"
    fi

    if [ "true" = "$inside_gitdir" ] && [ "true" = "$bare_repo" ]; then
        bare='BARE: '
    fi

    printf -- "$1" "$bare${branch##refs/heads/}$r"
}
